{"version":3,"sources":["hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","Layout","Aux","className","classes","Content","BurgerIngredient","ingredient","this","type","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","React","Component","burger","Burger","BugerBuilder","App","BurgerBuilder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAEeA,EAFH,SAACC,GAAD,OAAWA,EAAMC,U,gBCadC,EATA,SAAEF,GAAF,OACX,kBAACG,EAAD,KACA,6DACA,0BAAMC,UAAWC,IAAQC,SACpBN,EAAMC,Y,gCC8CAM,E,uKA/CX,IAAIC,EAAa,KAEjB,OAAOC,KAAKT,MAAMU,MACd,IAAK,eACDF,EAAa,yBAAKJ,UAAWC,IAAQM,cACzC,MAEA,IAAK,YACDH,EACI,yBAAKJ,UAAWC,IAAQO,UACpB,yBAAKR,UAAWC,IAAQQ,SACxB,yBAAKT,UAAWC,IAAQS,UAGpC,MAEA,IAAK,OACDN,EAAY,yBAAKJ,UAAWC,IAAQU,OACxC,MAEA,IAAK,SACDP,EAAY,yBAAKJ,UAAWC,IAAQW,SACxC,MAEA,IAAK,QACDR,EAAY,yBAAKJ,UAAWC,IAAQY,QACxC,MAEA,IAAK,QACDT,EAAY,yBAAKJ,UAAWC,IAAQa,QACxC,MAEA,QACIV,EAAa,KAIrB,OAAOA,M,GAvCoBW,IAAMC,WCWtBC,EAXA,SAACrB,GACZ,OACI,yBAAKI,UAAWC,IAAQiB,QACnB,kBAAC,EAAD,CAAkBZ,KAAK,cACvB,kBAAC,EAAD,CAAkBA,KAAK,WACvB,kBAAC,EAAD,CAAkBA,KAAK,SACvB,kBAAC,EAAD,CAAkBA,KAAK,mBCKrBa,E,uKATP,OACI,kBAACpB,EAAD,KACI,kBAAC,EAAD,W,GALWgB,IAAMC,WCalBI,E,uKAVb,OACM,6BACE,kBAAC,EAAD,KACE,kBAACC,EAAD,Y,GANMN,IAAMC,WCQJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f96322e5.chunk.js","sourcesContent":["const aux = (props) => props.children;\r\n\r\nexport default aux;","import React from \"react\";\r\nimport Aux from '../../hoc/Aux';\r\nimport classes from './Layout.css';\r\n\r\nconst Layout = ( props ) =>(\r\n    <Aux>\r\n    <div>Toolbar, SideDrawer,Backdrop</div>\r\n    <main className={classes.Content}>\r\n        {props.children}\r\n    </main>\r\n    </Aux>\r\n);\r\n\r\nexport default Layout;"," import React from 'react';\r\n import PropTypes from 'prop-types';\r\n import classes from './BurgerIngredient.css'\r\n\r\n\r\nclass BurgerIngredient extends React.Component {\r\n  render(){\r\n    let ingredient = null;\r\n\r\n    switch(this.props.type){\r\n        case('bread-bottom'):\r\n            ingredient = <div className={classes.BreadBottom}></div> ;\r\n        break;\r\n\r\n        case('bread-top'):\r\n            ingredient =(\r\n                <div className={classes.BreadTop}>\r\n                    <div className={classes.Seeds1}></div>\r\n                    <div className={classes.Seeds2}></div>\r\n                </div>\r\n            ) \r\n        break;\r\n\r\n        case('meat'):\r\n            ingredient =<div className={classes.Meat}></div>;\r\n        break;\r\n\r\n        case('cheese'):\r\n            ingredient =<div className={classes.Cheese}></div>;\r\n        break;\r\n\r\n        case('salad'):\r\n            ingredient =<div className={classes.Salad}></div>;\r\n        break;\r\n\r\n        case('bacon'):\r\n            ingredient =<div className={classes.Bacon}></div>;\r\n        break;\r\n\r\n        default:\r\n            ingredient = null;\r\n\r\n    }\r\n\r\n    return ingredient;\r\n\r\n  }  \r\n\r\n}\r\n\r\nBurgerIngredient.propTypes = {\r\n    type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default BurgerIngredient;","import React from 'react';\r\n\r\nimport classes from './Burger.css';\r\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient'\r\n\r\nconst burger = (props) => {\r\n    return (\r\n        <div className={classes.Burger}>\r\n             <BurgerIngredient type=\"bread-top\" />\r\n             <BurgerIngredient type=\"cheese\" />\r\n             <BurgerIngredient type=\"meat\" />\r\n             <BurgerIngredient type=\"bread-bottom\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default burger;","import React from 'react'; \r\nimport Aux from '../../hoc/Aux';\r\nimport Burger from '../../components/Burger/Burger';\r\n\r\nclass BugerBuilder extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <Aux>\r\n                <Burger />\r\n            </Aux>\r\n        ); \r\n    }\r\n\r\n}\r\n\r\nexport default BugerBuilder;","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\n\nclass App extends React.Component{\n\n  render(){\n  return (\n        <div>\n          <Layout>\n            <BurgerBuilder />\n          </Layout>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}